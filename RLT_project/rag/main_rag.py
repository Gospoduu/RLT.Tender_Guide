import subprocess
from qdrant_client import QdrantClient
from qdrant_client.http import models
from normalize_query import normalise_query, TERMINS
from embed_query import get_embedding  # <-- —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–Ω–µ—Å–µ–Ω–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª embeddings.py

# === 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Qdrant ===
client = QdrantClient(host="localhost", port=6333)
collection_name = "docs"


# === 2. –í—ã–∑–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ GPT-OSS:20b —á–µ—Ä–µ–∑ Ollama ===
def _call_local_gpt(prompt: str) -> str:
    try:
        result = subprocess.run(
            ["ollama", "run", "gpt-oss:20b"],
            input=prompt,
            capture_output=True,
            text=True,
            check=True
        )
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        return f"search_query: ERROR {e.stderr.strip()}"


# === 3. –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ Qdrant ===
def search_in_qdrant(query: str, top_k: int = 3):
    vector = get_embedding(query).tolist()
    hits = client.search(
        collection_name=collection_name,
        query_vector=vector,
        limit=top_k,
    )
    return hits


# === 4. –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞–π–ø–ª–∞–π–Ω RAG ===
def rag_pipeline(user_message: str):
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ (–µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å —Ç–∞–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞)
    normalized_query = normalise_query(user_message, TERMINS)

    # –®–∞–≥ 1: –ü–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ Qdrant
    hits = search_in_qdrant(normalized_query, top_k=3)

    if not hits:
        return "–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"

    # –®–∞–≥ 2: –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
    context_parts = []
    sources = []
    for hit in hits:
        payload = hit.payload
        context_parts.append(f"{payload['title']} ({payload['url']}): {payload['text']}")
        sources.append(payload['url'])

    context = "\n\n".join(context_parts)

    # –®–∞–≥ 3: –§–æ—Ä–º–∏—Ä—É–µ–º prompt –¥–ª—è LLM
    prompt = f"""
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
–£ —Ç–µ–±—è –µ—Å—Ç—å –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π (–Ω–∏–∂–µ).
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: "{user_message}".

–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:
{context}

–ó–∞–¥–∞—á–∏:
1. –û–ø—Ä–µ–¥–µ–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–∞:
   - "–æ—Ç–≤–µ—Ç –ø–æ —Ä–∞–±–æ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
   - "–æ—Ç–≤–µ—Ç –ø–æ –ø—Ä–æ–±–ª–µ–º–µ"
   - "–æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ—Ä–º–∏–Ω"
2. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.
3. –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å —Å—Ç—Ä–æ–∫—É: "–ò—Å—Ç–æ—á–Ω–∏–∫: {sources[0]}"
4. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –Ω–∞–ø–∏—à–∏: "–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞".
"""

    # –®–∞–≥ 4: –û—Ç–≤–µ—Ç –æ—Ç GPT-OSS
    llm_answer = _call_local_gpt(prompt)
    return llm_answer


# === 5. –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ===
if __name__ == "__main__":
    test_query = "–ö–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ—Å—Ç–∞–≤—â–∏–∫—É –ø–æ 44-–§–ó?"
    answer = rag_pipeline(test_query)
    print("ü§ñ –û—Ç–≤–µ—Ç:\n", answer)
